@startuml
skinparam classAttributeIconSize 0
left to right direction
skinparam linetype ortho

package donjon #FF6961{
    class Case{
        - m_x : Integer
        - m_y : Integer
        - estObstacle : Boolean
        + <<create>> Case(x : Integer, y : Integer)
        + getM_x() : Integer
        + getM_y() : Integer
        + getEntite() : Entite
        + setEntite(e : Entite) : Entite
        + getItem() : Item
        + setItem(i : Item)
        + isLibre() : Boolean
        + estObstacle() : Boolean
        + toString() : String
    }

    class Donjon{
       - m_plateau : Case[*]
        - m_tailleX : Integer
        - m_tailleY : Integer
        + <<create>> Donjon(tailleX : Integer, tailleY : Integer)
        + afficher()
        + getCase(x : Integer, y : Integer) : Case
        + getTailleX() : Integer
        + getTailleY() : Integer
        + setCase(x : Integer, y : Integer, newCase : Case)
        + getCaseInvisible() : Case
    }
}
package entite #AEC6CF{
     interface Entite <<interface>> {
         + getX() : Integer
         + getY() : Integer
         + setPosition(x : Integer, y : Integer)
         + toString() : String
         + getType() : TypeEntite
         + getSpeed() : Integer
         + getAtk_reach() : Integer
         + getDmg() : Integer
         + getCaractAtt(reach : Integer) : Integer
         + getCA() : Integer
         + changeHp(hp : Integer) : Boolean
         + afficherHP() : String
         + estMort() : Boolean
         + getInit() : Integer
         + getDescription() : String
         + getActionDeBase() : Action[*]
         + attaquer(cible : Entite) : Integer
     }

     enum TypeEntite <<enumerate>> {
         PERSONNAGE
         MONSTRE
     }
}
package items #FFFACD{
    abstract class Item <<abstract>> {
            - m_nom : String
            - m_heavy : Boolean
            + <<create>> Item(nom : String, heavy : Boolean)
            + getNom() : String
            + getType() : TypeItem
            + toString() : String
        }

        class Armor {
            - m_CA : Integer
            + <<create>> Armor(nom : String, heavy : Boolean, CA : Integer)
            + getCA() : Integer
            + getType() : TypeItem
        }

        class Weapon {
            - m_dmg : Des
            - m_atk_reach : Integer
            - m_bonusDegats : Integer
            + <<create>> Weapon(nom : String, heavy : Boolean, dmg : Des, atk_reach : Integer)
            + getAtk_reach() : Integer
            + getDmg() : Integer
            + getType() : TypeItem
            + ameliorer()
            + getNbDes() : Integer
            + getTypeDes() : Integer
            + getBonusDegats() : Integer
        }

        enum TypeItem <<enumerate>> {
            ARME
            ARMURE
        }

        Armor --|> Item
        Weapon --|> Item
        Item --> TypeItem
}
Armor --|> items.Item
package monstres #CBAACB{
    class Monstre {
        - m_x : Integer
        - m_y : Integer
        - m_num : Integer
        - m_specie : String
        - m_atk_reach : Integer
        - m_dmg : Des
        - m_hp : Integer
        - m_strength : Integer
        - m_dext : Integer
        - m_armor_class : Integer
        - m_init : Integer
        - m_speed : Integer
        - m_max_hp : Integer
        + <<create>> Monstre(num : Integer, specie : String, atk_reach : Integer, dmg : Des, hp : Integer, strength : Integer, dext : Integer, armor_class : Integer, init : Integer, speed : Integer)
        + getX() : Integer
        + getY() : Integer
        + setPosition(x : Integer, y : Integer)
        + getSpecie() : String
        + getSpeed() : Integer
        + getAtk_reach() : Integer
        + getInit() : Integer
        + getDescription() : String
        + getCA() : Integer
        + getDext() : Integer
        + getStrength() : Integer
        + getDmg() : Integer
        + getCaractAtt(portee : Integer) : Integer
        + getArmorClass() : Integer
        + afficherHP() : String
        + estMort() : Boolean
        + setHp(new_hp : Integer)
        + changeHp(adding_hp : Integer) : Boolean
        + getActionDeBase() : Action[*]
        + attaquer(cible : Entite) : Integer
        + getType() : TypeEntite
        + toString() : String
    }

    Monstre ..|> Entite
}
package outils #FFD1DC{
    class Des {
        - m_nb_des : Integer
        - m_type_des : Integer
        + <<create>> Des(nb_des : Integer, type_des : Integer)
        + genererListeRandom() : List<Integer>
        + genererRandom() : Integer
        + getNbDes() : Integer
        + getTypeDes() : Integer
        }
}
package personnages #C1F0F6{
    class Personnage {
            - m_nom : String
            - m_x : Integer
            - m_y : Integer
            - estMort : Boolean
            - m_hp : Integer
            - m_max_hp : Integer
            - m_strength : Integer
            - m_dext : Integer
            - m_speed : Integer
            - m_init : Integer
            - m_inventory : List<Item>
            - m_armor : Armor
            - m_weapon : Weapon
            - m_classes : Classes
            - m_race : Race
            + <<create>> Personnage(nom : String, race : Race, classes : Classes)
            + getNom() : String
            + getHp() : Integer
            + getMaxHp() : Integer
            + getStrength() : Integer
            + getDext() : Integer
            + getSpeed() : Integer
            + getInit() : Integer
            + getCA() : Integer
            + getAtk_reach() : Integer
            + getDmg() : Integer
            + getInventory() : List<Item>
            + getArmor() : Armor
            + getWeapon() : Weapon
            + getSorts() : List<Sort>
            + afficherStats()
            + afficherInventaire()
            + afficherHP() : String
            + setHp(new_hp : Integer)
            + changeHp(adding_hp : Integer) : Boolean
            + addHP(Soin : Integer)
            + setPosition(x : Integer, y : Integer)
            + getX() : Integer
            + getY() : Integer
            + estMort() : Boolean
            + toString() : String
            + getDescription() : String
            + attaquer(cible : Entite) : Integer
            + getActionDeBase() : List<Action>
            + equiper(item : Item) : Boolean
            + equiperArme(weapon : Weapon)
            + desequiperArme(weapon : Weapon)
            + equiperArmure(armor : Armor)
            + desequiperArmmure(armor : Armor)
            + listeArmes() : List<Weapon>
            + addItemInventory(item : Item)
        }

        class Race {
            - m_nom : String
            - m_hp : Integer
            - m_strength : Integer
            - m_dext : Integer
            - m_speed : Integer
            - m_init : Integer
            + <<create>> Race(nom : String, hp : Integer, strength : Integer, dext : Integer, speed : Integer, init : Integer)
            + getNom() : String
            + getHp() : Integer
            + getStrength() : Integer
            + getDext() : Integer
            + getSpeed() : Integer
            + getInit() : Integer
        }

        class GameMaster{}

        Personnage ..|> Entite
}

package systeme #77DD77 {
    package actions #FFD580{
        package sorts #E6E6FA{

            interface Sort <<interface>> {
                + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
                + Description() : String
            }

            class ArmeMagique {
                + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
                + Description() : String
            }

            class BoogieWoogie {
                + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
                + Description() : String
            }

            class Guerison {
                + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
                + Description() : String
            }
            ArmeMagique ..|> Sort
            BoogieWoogie ..|> Sort
            Guerison ..|> Sort
        }

        interface Action <<interface>> {
            + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        class ActionAttaquer {
            + executer(entite : Entite, gestionnaire : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        class ActionSeDeplacer {
            + executer(entite : Entite, gestionnaire : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        class ActionEquiper {
            + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        class ActionRamasser {
            + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        class ActionSorts {
            + executer(entite : Entite, gestionnaireDonjon : GestionnaireDonjon) : Boolean
            + getNom() : String
        }

        ActionAttaquer ..|> Action
        ActionSeDeplacer ..|> Action
        ActionEquiper ..|> Action
        ActionRamasser ..|> Action
        ActionSorts ..|> Action
        }

    class Affichage {
        + {static} afficher(chaine : String)
    }

    class Entree {
        + {static} lireInt(message : String) : Integer
        + {static} fermer()
    }

    class GestionnaireDonjon {
        - donjon : Donjon
        - listeEntite : List<Entite>
        + <<create>> GestionnaireDonjon(donjon : Donjon)
        + ajouterEntite(e : Entite, x : Integer, y : Integer)
        + deplacerEntite(e : Entite, dest_x : Integer, dest_y : Integer) : Boolean
        + seTeleporterBoogieWoogie(entite : Entite, dest_x : Integer, dest_y : Integer) : Boolean
        + seTeleporterAbime(entite : Entite)
        + seTeleporter(entite : Entite, dest_x : Integer, dest_y : Integer) : Boolean
        + attaquer(attaquant : Entite, x_cible : Integer, y_cible : Integer) : Boolean
        + meurt(entite : Entite)
        + getListeEntite() : List<Entite>
        + listePersonnage() : List<Personnage>
        + getDonjon() : Donjon
        + PersonnageSurItem(entite : Entite, donjon : Donjon) : Boolean
    }
    class Partie{
    }
    class TourDeJeu{
    }
}
items.Armor       --|> items.Item
items.Weapon      --|> items.Item
monstres.Monstre  --|> entite.Entite
personnages.Personnage --|> entite.Entite

systeme.actions.ActionAttaquer   --|> systeme.actions.Action
systeme.actions.ActionSeDeplacer --|> systeme.actions.Action
systeme.actions.ActionEquiper    --|> systeme.actions.Action
systeme.actions.ActionRamasser   --|> systeme.actions.Action
systeme.actions.ActionSorts      --|> systeme.actions.Action

systeme.actions.sorts.ArmeMagique   --|> systeme.actions.sorts.Sort
systeme.actions.sorts.BoogieWoogie  --|> systeme.actions.sorts.Sort
systeme.actions.sorts.Guerison      --|> systeme.actions.sorts.Sort

donjon.Case --> entite.Entite
donjon.Case --> items.Item
donjon.Donjon --> donjon.Case

entite.Entite --> systeme.actions.Action
entite.Entite --> entite.TypeEntite

monstres.Monstre --> outils.Des
personnages.Personnage --> outils.Des
personnages.Personnage --> items.Weapon
personnages.Personnage --> items.Armor
personnages.Personnage --> personnages.Classes
personnages.Personnage --> personnages.Race
personnages.Personnage --> systeme.actions.sorts.Sort

systeme.actions.sorts.Guerison --> personnages.Personnage
systeme.actions.sorts.ArmeMagique --> personnages.Personnage
systeme.actions.sorts.BoogieWoogie --> entite.Entite

personnages.Personnage o-- items.Item : m_inventory
personnages.Classes    o-- items.Item : m_inventory
systeme.GestionnaireDonjon o-- entite.Entite : listeEntite
donjon.Donjon *-- donjon.Case : m_plateau
@enduml